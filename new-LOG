Start with a clean instance of an Amazon Public Image (FC4 = Fedora Core version 4 == very old)

2007-06-06

Downloaded aws from http://timkay.com/aws/aws into /downloads/aws/

Ran "perl aws --install" (sets aws as executable; did not symlink from /usr/bin because not logged in as root and not su'ed)

Downloaded access keys and x508 certificate into /downloads/amazon-certs/

Tested aws (list all buckets in our S3 account) - works fine!  Hurrah!  Tim Kay gets a Christmas card from me in 2007!

Created an AWS group:

OLD ./ec2addgrp auto_service -d "Instances that run automated services"
NEW cd mysociet/bbcparlvid
NEW bin/aws-1.1beta addgrp bbcparlservers -d "Virtual servers that handle BBC Parliament processing and video serving"

Authorised this group to be accessed via ssh (port 22) and http (port 80) from the public internet 0.0.0.0/0 (was going to be just 82.111.230.0/24 but decided against this):

OLD ./ec2authorize auto_service -P tcp -p 22 -s 82.111.230/24
OLD ./ec2authorize auto_service -P tcp -p 80 -s 0.0.0.0/0
NEW bin/aws-1.1beta authorize bbcparlservers -P tcp -p 22 -s 0.0.0.0/0
NEW bin/aws-1.1beta authorize bbcparlservers -P tcp -p 80 -s 0.0.0.0/0

Created a keypair to control group bbcparlservers (WAS auto_services) and made it read/write only by owner:

OLD ./ec2-add-keypair auto_service_keypair  # cut and pasted the keypair result into ~/conf/auto_service_keypair
OLD chmod 600 ~/conf/auto_service_keypair
NEW bin/aws-1.1beta add-keypair bbcparlservers_keypair  # cut and pasted the keypair result into ~/conf/ejhp/bbcparlservers_keypair - the name has to match the keypair name, although the file only contains the private key
NEW chmod 600 ~/conf/ejhp/bbcparlservers_keypair 

Started a new instance of Fedora Core 4 Base public image (ami-20b65349) using the auto_service group:

OLD ~/downloads/aws/ec2run -k auto_service_keypair -g auto_service ami-20b65349  # working from ~/conf/ at that point
NEW bin/aws-1.1beta run -k bbcparlservers_keypair -g bbcparlservers ami-20b65349

Find out the hostname of the new instance (takes a few seconds to boot):

~/mysociety/bbcparlvid/bin/aws-1.1beta describe-instances -k bbcparlservers_keypair

Logged into the instance using local private key:

OLD ssh -i ~/conf/auto_service_keypair root@[host]
NEW ssh -i ~/conf/ejhp/bbcparlservers_keypair root@[host]

Upgrade it from FC4 to FC7 == quite recent

Installing packages using yum:

yum install subversion gcc

yum update

Upgrading from fedora core 4 (FC4) to fedora core 7 (FC7).  This is because most of the FC4 packages are very old (~ 2 years), and we need modern versions of e.g. mplayer, ffmpeg.  Following instructions 
from http://samuelsidler.com/2007/02/upgrading-ec2-server-to-fedora-core-6.html

Start with a new instance (AMI = ami-20b65349, host = ec2-72-44-45-194.z-2.compute-1.amazonaws.com, group = auto_service, keypair = auto_service_keypair ) and login as root.  Start by cleaning up the yum cache:

yum clean all

Update the kernel to FC5:

rpm -Uhv http://download.fedora.redhat.com/pub/fedora/linux/core/5/i386/os/Fedora/RPMS/fedora-release-5-5.noarch.rpm

yum remove fuse-encfs\* # because that package will fail when upgrading

yum upgrade udev # because that package must be upgraded before the rest for some silly reason

yum install kernel # kernel installation part 1. this takes a long time. :(

reboot # crumbs, really? I shall be most unhappy if this wipes out all the packages I've just installed

yum clean all

# Now upgrade to FC6

rpm -Uhv http://download.fedora.redhat.com/pub/fedora/linux/core/6/i386/os/Fedora/RPMS/fedora-release-6-4.noarch.rpm http://download.fedora.redhat.com/pub/fedora/linux/core/6/i386/os/Fedora/RPMS/fedora-release-notes-6-3.noarch.rpm

yum remove kernel-2.6.17 kernel-2.6.16 # need to remove the other kernels, or the upgrade will fail

yum update # takes a long time, need to hang around to confirm import of GPG key after download of 335 packages!

wget http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/4/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm

rpm -i freshrpms-release-1.1-1.fc.noarch.rpm

yum update

yum install cvs gcc php ffmpeg xorg-x11-Mesa-libGL mplayer emacs lighttpd perlbal sqlite perl-XML-Parser perl-XML-libXML libxml2-devel # for the headers, otherwise CPAN can't install XMK::LibXML::XPathContext perl-DBI

Note: mplayer can't find /usr/lib/libGL.so.1 # because it's not there - for some reason, the mplayer package doesn't include this as a dependency

Fix this by installing the Mesa-libGL package.

Download flvtool2:

wget http://rubyforge.org/frs/download.php/17497/flvtool2-1.0.6.tgz

tar -xzvf flvtool2-1.0.6.tgz

Execute following commands in flvtool2 directory:

ruby setup.rb config
ruby setup.rb setup
sudo ruby setup.rb install

Now update/install CPAN modules (including many dependencies):

cpan # for the shell; setup defaults

install Bundle::CPAN

install Encode

install Getopt::Long

install Pod::Man

install Sys::Syslog

install Date::Manip

install Test::Pod

install Test::Pod::Coverage

install IO:Prompt

install Amazon::Net::SimpleQueue

install DBD::SQLite # installs DBI as well

install Digest::HMAC_SHA1

install XML::XPath

install Date::Format

install XML::Simple

install DateTime

[[ DEPRECATED install Net::Amazon::S3 - using aws instead ]]

quit

Adding new user:

useradd -m services

passwd services

Changing to that user:

su - bbcparlvid

mkdir /home/bbcparlvid/doc_root

exit

Update /etc/lighttpd/lighttpd.conf - add mod_flv_streaming to the module load list, point document-root to /home/bbcparlvid/doc_root, and add a line:

flv-streaming.extensions = ( ".flv" )

Logwatch started complaining:

crond[7218]: pam_loginuid(crond:session): set_loginuid failed opening loginuid: 1 Time(s)

So I modified /etc/ssh/sshd_config as follows:

# changed the PAM line because logwatch kept on complaining about PAM failures
UsePAM no
UseLogin yes
#UsePAM yes

And made the following (identical) change to both /etc/pam.d/sshd and /etc/pam.d/crond :

# edited by etienne@mysociety.org
#session    required   pam_loginuid.so

Making an Amazon Machine Image (AMI):

Copied code and config data across from the EC2 machine to bitter.ukcod.org.uk - deleted everything under /home/bbcparlvid/

Copied these files from bitter to EC2 machine, putting them in /mnt/amazon-certs/  (xxx in place of actual filenames and user ids below):

access-key-id  cert-xxxx.pem  pk-xxxx.pem  secret-access-key

Created an AMI:

ec2-bundle-vol -d /mnt/image/ -k /mnt/amazon-certs/pk-xxxx.pem -c /mnt/amazon-certs/cert-xxxx.pem -u xxxxxxxxxxxx

Realised that I'm going to have to recreate the filesystem under /mnt/processing/ when the instance boots up, because we excluded /mnt/ from the image. For future reference, it looks like this:

processing/
processing/downloads/bbcparliament
processing/downloads
processing/output
processing/raw-footage/bbcparliament
processing/raw-footage

Uploaded the AMI to S3 bucket bbcparlvid-instances:

ec2-upload-bundle -b bbcparlvid-instances -m /mnt/image/image.manifest.xml -a 0AR3610J0M492SZND4R2 -s k1KzShfJfocUzoegjX1ukukcCrwtNAUCamDlxxTu

Found a machine that has java >= 1.5 (seagrass.goatchurch.org.uk) and copied across ec2-api-tools.zip (downloaded from http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip)

Copied across the access_key_id file to seagrass.

Set environment variables EC2_HOME and JAVA_HOME:

EC2_HOME=/home/etienne/ec2-api-tools-1.2-9739/; export EC2_HOME
JAVA_HOME=/usr/local; export JAVA_HOME

Register the bundle to get an AMI id in return (printed to the command line - make a note of this!

./bin/ec2-register bbcparlvid-instances/image.manifest.xml -K pk-xxxx.pem -C cert-xxxx.pem

The AMI id is ami-07f4116e - hurrah!


 
