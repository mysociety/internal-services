#!/usr/bin/perl -w
#
# parlparse-ids:
#
# Recreates table linking DaDem representative ids with parlparse MP person ids.
# See http://ukparse.kforge.net
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: parlparse-ids,v 1.8 2009-04-01 18:22:48 matthew Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../../perllib";
use lib "$FindBin::Bin/../../../perllib";
use lib "$FindBin::Bin/../../mapit-dadem-loading";

use POSIX qw(strftime);
use Data::Dumper;
use IPC::Open2;
use utf8;
binmode(STDOUT, ':utf8');

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::DaDem;
use mySociety::MaPit;
use mySociety::VotingArea;
use mySociety::Parties;

sub connect_to_dadem_database () {
    my $host = mySociety::Config::get('DADEM_DB_HOST', undef);
    my $port = mySociety::Config::get('DADEM_DB_PORT', undef);

    my $connstr = 'dbi:Pg:dbname=' . mySociety::Config::get('DADEM_DB_NAME');
    $connstr .= ";host=$host" if (defined($host));
    $connstr .= ";port=$port" if (defined($port));

    return DBI->connect($connstr,
                        mySociety::Config::get('DADEM_DB_USER'),
                        mySociety::Config::get('DADEM_DB_PASS'),
                        { RaiseError => 1, AutoCommit => 0 });
}
my $d_dbh = connect_to_dadem_database();

$d_dbh->do('delete from parlparse_link;');
#print "WMC\n";
process_one_type("WMC", './parlparse-ids.py');
#print "HOC\n";
process_one_type("HOC", './parlparse-ids-lords.py');
$d_dbh->commit();

sub process_one_type {
    my $area_type = shift;
    my $matcher_script = shift;

    # Need to obtain a list of MP/constituency names and then pick out messages by those.
    my $areaids = mySociety::MaPit::get_areas_by_type($area_type, -1); # array of ids of ALL areas (not just current generation)
    my %areainfo = %{mySociety::MaPit::get_voting_areas_info($areaids)}; # hash from area id to hash of info about area
    my $repids = mySociety::DaDem::get_representatives([keys %areainfo], 1); # hash from area to reps for that area
    my @allreps;
    my $reptoarea; # hash from rep id to area represented
    foreach (keys %$repids) {
        if (!@{$repids->{$_}}) {
            print STDERR "area #$_ ($areainfo{$_}->{name}) has no representative\n";
        } else {
            foreach my $repid (@{$repids->{$_}}) {
                if ($repid !~ /^[1-9]\d*$/) {
                    print STDERR "area #$_ ($areainfo{$_}->{name}) has bad representative ID $repid\n";
                }

                push @allreps, $repid;
                $reptoarea->{$repid} = $_;
            }
       }
    }
    my %repinfo = %{mySociety::DaDem::get_representatives_info(\@allreps)};

    # Match all the names
    my ($rd, $wt);
    open2($rd, $wt, $matcher_script) or die "failed to call $matcher_script";
    binmode($wt, ':utf8');
    foreach my $repid (@allreps) {
        my $name = $repinfo{$repid}->{name};
        next if $name =~ m/Election Pending/;
        next if $name =~ m/^Moogle$/;
        next if $name =~ /^Sn Simon/;
        my $cons = $areainfo{$reptoarea->{$repid}}->{name};
        my $editdate = strftime("%Y-%m-%d", localtime($repinfo{$repid}->{whenlastedited}));
        my $createdate = strftime("%Y-%m-%d", localtime($repinfo{$repid}->{whencreated}));
        # print "$name $cons $createdate $editdate\n";
        $wt->print("$name#$cons#$createdate\n");
        my $person_id_1 = $rd->getline();
        die "none matched for $name ($cons)" if (!$person_id_1);
        $person_id_1 =~ s/(\s+$)|(^\s+)//g;
        $d_dbh->do('insert into parlparse_link (representative_id, person_id) values (?, ?)', {}, $repid, $person_id_1);
    }
    close($rd);
}

