#!/usr/bin/perl -w -I../../perllib
#
# new_scottish_constituencies:
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: new_scottish_constituencies,v 1.7 2005-06-09 11:21:07 chris Exp $';

use strict;

use Data::Dumper;
use Text::CSV_XS;

use Common;

my $c = new Text::CSV_XS({ binary => 1 });

die "single argument is CSV file giving new Scottish constituency mapping" unless (@ARGV == 1);

my %council_name;
my %ward_name;

my %constituency_name;

# council name -> constituency for leftover bits of that council
my %council_to_constituency;
# council name -> ward name -> constituency for that ward
my %ward_to_constituency;

my ($last_constituency, $last_council);
foreach (read_csv_file($ARGV[0], 1)) {
    my ($constituency, $council, $ward) = @$_;

    die "no constituency at top of file" unless ($constituency || $last_constituency);
    die "no council at top of file" unless ($council || $last_council);

    $constituency ||= $last_constituency;
    $council ||= $last_council;

    $constituency_name{$constituency} = 1;

    $council_name{$council} = 1;
    $ward_name{$council}->{$ward} = 1;

    $ward_to_constituency{$council} ||= { };

    if ($ward eq '*') {
        die "constituency '$constituency': council '$council' already has a residue constituency, '$council_to_constituency{$council}'" if (exists($council_to_constituency{$council}));
        $council_to_constituency{$council} = $constituency;
    } else {
        die "constituency '$constituency': ward '$ward' in council '$council' is already assigned to constituency '$ward_to_constituency{$council}->{$ward}'"
            if (exists($ward_to_constituency{$council}->{$ward}));
        $ward_to_constituency{$council}->{$ward} = $constituency;
    }
    
    $last_constituency = $constituency;
    $last_council = $council;
}

my $dbh = connect_to_mapit_database();

# Nasty. We misidentified certain areas as being English rather than Scottish
# when doing the initial DB load, based on a misunderstanding of the ONS's ID
# number scheme. Correct that now.
$dbh->do("update area set country = 'S' where ons_code like '00R%'");

# Match up council names to their names in the database.
my %database_councils = map {
        $_->[0] => $_->[1]
    } @{$dbh->selectall_arrayref(q(
                    select id, name
                    from area, area_name
                    where area_name.area_id = area.id and area.country = 'S'
                        and area_name.name_type = 'O' and area.type = 'UTA'
                ))};

my %council_to_id;
my %ward_to_id;

foreach my $council (sort keys %council_name) {
    my ($match) = sort { $b->[0] <=> $a->[0] } map { [placename_match_metric($council, $database_councils{$_}), $_] } keys %database_councils;
    die "no match for '$council'" unless (defined($match));
    $council_to_id{$council} = $match->[1];
    print "identify council '$council' with database council '$database_councils{$match->[1]}' #$match->[1]\n";
    delete $database_councils{$match->[1]};
}

foreach my $council (sort keys %ward_name) {
    print "in council '$council'...\n";
    my %database_wards = map {
            $_->[0] => $_->[1]
        } @{$dbh->selectall_arrayref(q(
                        select id, name
                        from area, area_name
                        where area_name.area_id = area.id
                            and parent_area_id = ?
                            and area.type = 'UTW'
                            and area_name.name_type = 'O'
                    ), {}, $council_to_id{$council})};

    my %r_database_wards = reverse(%database_wards);

    foreach my $ward (sort { length($b) <=> length($a) } keys %{$ward_name{$council}}) {
        next if ($ward eq '*');

        # If there is an exact match, then use that.
        if (exists($r_database_wards{"$ward Ward"})) {
            print "  ward '$ward' exactly matches database ward '$ward Ward' #", $r_database_wards{"$ward Ward"}, "\n";
            $ward_to_id{$council}->{$ward} = $r_database_wards{"$ward Ward"};
            delete $r_database_wards{"$ward Ward"};
            delete $database_wards{$ward_to_id{$council}->{$ward}};
            next;
        }
        
        my ($match) = sort { $b->[0] <=> $a->[0] } map { [placename_match_metric($ward, $database_wards{$_}), $_] } keys %database_wards;
        die "no match for '$ward' in '$council'" unless (defined($match));
        $ward_to_id{$council}->{$ward} = $match->[1];
        print "  identify ward '$ward' with database ward '$database_wards{$match->[1]}' #$match->[1]\n";
        delete $r_database_wards{$database_wards{$match->[1]}};
        delete $database_wards{$match->[1]};
    }

    if (scalar(keys(%database_wards)) > 0) {
        print "residue of '$council'...\n";
        foreach (sort { $database_wards{$a} cmp $database_wards{$b} } keys %database_wards) {
            print "  '$database_wards{$_}' #$_\n";
        }
    }
}

#$dbh->begin();

$dbh->do('delete from new_scottish_constituencies_fixup');

my %constituency_to_id;

# Horrid. To fix the balls-up I made first time round, try to pick out the
# appropriate constituencies by name.
foreach my $constituency (sort(keys(%constituency_name))) {

    my $id = $dbh->do("select area_id from area_name where name_type = 'L' and name = ? and (select type from area where id = area_id and generation_low = generation_high and generation_low = 2) = 'WMC'", {}, $constituency);
    
    if (defined($id)) {
        print "constituency '$constituency' already in database as #$id\n";
    } else {
        my $friendly = $constituency;
        $friendly =~ s#(Burgh|County) Constituency$##;
        $id = $dbh->selectrow_array("select nextval('area_id_seq')");
        $dbh->do(q(
                insert into area (id, type, country, generation_low, generation_high)
                    values (?, 'WMC', 'S', 2, 2) -- XXX HACK!
            ), {}, $id);
        $dbh->do(q(
                insert into area_name (area_id, name_type, name)
                    values (?, 'L', ?)
            ), {}, $id, $constituency);
        $dbh->do(q(
                insert into area_name (area_id, name_type, name)
                    values (?, 'F', ?)
            ), {}, $id, $friendly);
        print "inserting constituency '$constituency' into database as #$id\n";
    }
    $constituency_to_id{$constituency} = $id;
}

foreach my $council (keys(%ward_to_constituency)) {
    my $ww = $ward_to_constituency{$council};
    foreach my $ward (keys(%$ww)) {
        print "map ward '$ward' #$ward_to_id{$council}->{$ward} to constituency '$ww->{$ward}' #$constituency_to_id{$ww->{$ward}}\n";
        $dbh->do('
                insert into new_scottish_constituencies_fixup
                    (ward_area_id, constituency_area_id)
                values (?, ?)', {},
                $ward_to_id{$council}->{$ward}, $constituency_to_id{$ww->{$ward}});
    }
}

foreach my $council (keys(%council_to_constituency)) {
    print "map residue of council '$council' #$council_to_id{$council} to constituency '$council_to_constituency{$council}'\n";
    $dbh->do('
            insert into new_scottish_constituencies_fixup
                (council_area_id, constituency_area_id)
            values (?, ?)', {},
            $council_to_id{$council}, $constituency_to_id{$council_to_constituency{$council}});
}

# Sanity check. We must ensure that every ward in Scotland is associated with a
# new constituency.
my $st = $dbh->prepare(q(select id, parent_area_id from area where type = 'UTW' and country = 'S'));
$st->execute();
while (my ($id, $parent_id) = $st->fetchrow_array()) {
    # ugh. Should do this in the db with one select, but I'm feeling lazy.
    my $c_id = $dbh->selectrow_array('select constituency_area_id from new_scottish_constituencies_fixup where ward_area_id = ?', {}, $id);
    $c_id ||= $dbh->selectrow_array('select constituency_area_id from new_scottish_constituencies_fixup where council_area_id = ?', {}, $parent_id);
    die "ward '" . scalar($dbh->selectrow_array('select name from area_name where area_id = ?', {}, $id)) . "' #$id has no constituency fixup mapping"
        unless (defined($c_id));
}

#$dbh->commit();
$dbh->rollback();

$dbh->disconnect();
