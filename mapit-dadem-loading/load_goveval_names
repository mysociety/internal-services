#!/usr/bin/perl -w -I../../perllib
#
# load_goveval_names
# Load in GovEval or similar data, match names to Ordnance Survey ones
# in the MaPit database, and add in the GovEval names as alternates.
#
# Parameters: 
# $1 - kind of data, currently choose from: mep, mp
# stdin - the CSV file from GovEval or FaxYourMP
# make sure ../conf/general is configured for mapit db
#
# Example usage:
# cat ../../../goveval/mep-20041001.csv | ./load_goveval_names mep
# cat ../../../goveval/faxyourmp-mp-20041207-withcons.csv | ./load_goveval_names mp
# cat ../../../goveval/msp-sp{c,e}-20041001.csv | ./load_goveval_names msp
# cat ../../../goveval/wam-20041001.csv | ./load_goveval_names wam
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: load_goveval_names,v 1.12 2005-01-19 14:45:32 francis Exp $';

use strict;

use DBI;
use DBD::Pg;
use Text::CSV_XS;
use Data::Dumper;

use Common;

my $kind = lc(shift(@ARGV));
die "specify what kind of CSV file" if (!defined($kind));
my $types;
my $name_type_char;
if ($kind eq "mep") {
    $types = [qw(EUR)];
    $name_type_char = 'G';
} elsif ($kind eq "mp") {
    $types = [qw(WMC)];
    $name_type_char = 'X';
} elsif ($kind eq "msp") {
    $types = [qw(SPC SPE)];
    $name_type_char = 'G';
} elsif ($kind eq "wam") {
    $types = [qw(WAC WAE)];
    $name_type_char = 'G';
} else {
    die "Please specify 'mep' or 'mp'";
}

my $dbh = connect_to_mapit_database();
# DBI->trace(2);

# Delete existing GovEval name data
$dbh->do(
        q#delete from area_name where area_id in (select area_id from area where
            (# . join(' or ', map { "type = '$_'" } @$types) . q#)) 
            and name_type = ?;#, {}, $name_type_char
);

# canonicalise_constituency_name NAME
# Convert the NAME of a constituency into a "canonical" version of the
# name. That is, one with all the parts which often vary between
# spellings reduced to the simplest form. This simple form can then
# be used with exact matching.
sub canonicalise_constituency_name ($) {
    $_ = shift;

    # Europe regions
    s#^Greater ##i;
    s# Euro Region$##;
    s#N\. Ireland#Northern Ireland#;

    # Westminster constituencies
    s# Burgh Const$##;
    s# Co Const$##;
    s# Boro Const$##;
    s# The$##;
    s#^The##;
    s# City of$##;
    s#^City of##;
    s#Ã´#o#g;

    # Scottish constituencies/electoral regions
    s#Orkney Islands#Orkney#;
    s#Shetland Islands#Shetland#;
    s# P Const$##;
    s# PER$##;
    s# Region$##;
    s# P$##;    # ?
    s#N\. #North #;
    s#E\. #East #;
    s#S\. #South #;
    s#W\. #West #;

    # Welsh Assembly regions
    s# Assembly ER$##;
    s# Assembly Const$##;

    # General
    $_ = lc;
    s#&#and#g;
    s#-# #g;
    s#'##g;
    s#,##g;
    s#\.##g;
    s#\s+# #g;
    s#^\s+##g;
    s#\s+$##g;

    return $_;
}

# %parent_to_id
# Hash of voting area canonical name to voting area ID from existing
# MaPit data.
my %parent_to_id;

# Cache of name-->id map of all the areas
my $s = $dbh->prepare(
        q#select distinct on (area_id) area_id, name from area_name, area
            where area_name.area_id = area.id
            and (# . join(' or ', map { "type = '$_'" } @$types) . q#)#
    );
$s->execute();

while (my ($area_id, $name) = $s->fetchrow_array()) {
    # Create canonical version of name and also hash it as lookup
    $_ = canonicalise_constituency_name($name);
    die "Already have id for canonicalised $_, being " .  $parent_to_id{$_} .  "\n" if (exists($parent_to_id{$_}));

    $parent_to_id{$_} = $area_id;
}
 
# Load the GovEval data.
my $C = new Text::CSV_XS({ binary => 1 });
<STDIN>;    # header line

# %newnames
# Hash of GovEval name to corresponding id.
my %newnames;

while (my $line = <STDIN>) {
    chomp($line);
    $C->parse($line);
    my $cons;

    if ($kind eq "mep" or $kind eq "msp" or $kind eq "wam") {
        # GovEval-format file.
        my ($first, $last, $constituency, $party, $email, $fax) = map { trim_spaces($_) } $C->fields();
        $cons = $constituency;
    } elsif ($kind eq "mp") {
        my ($name, $constituency, $email, $fax, $phone, $constituencyfax, $party) = map { trim_spaces($_) } $C->fields();
        $cons = $constituency;
    } else {
        die "Missing kind in code";
    }

    die "constituency not defined for line '$line'\n" unless (defined($cons));
    $_ = canonicalise_constituency_name($cons);
    die "no constituency in database matches canonical name '$_'\n" unless (exists($parent_to_id{$_}));
    my $id = $parent_to_id{$_};

    if (exists($newnames{$cons})) {
        if ($newnames{$cons} != $id) {
            die "Already have different id for GovEval name $cons id $id, being " .  $newnames{$cons} .  "\n" 
        } else {
            # Exact duplicate, so ignore it
        }
    } else {
        $newnames{$cons} = $id;
    }
}

# Add name alises to the database
foreach my $name (keys %newnames) {
    my $id = $newnames{$name};
    print "$id $name\n";
    $dbh->do("insert into area_name (area_id, name_type, name) values (?, ?, ?)", {}, $id, $name_type_char, $name);
}

$dbh->commit();

$dbh->disconnect();

