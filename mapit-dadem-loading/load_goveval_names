#!/usr/bin/perl -w
#
# load_goveval_names
# Load in GovEval data, match names to Ordnance Survey once in the MaPit
# database, and add in the GovEval names as alternates.
#
# Parameters:  Pipe the councillors.csv file from GovEval into standard
# input.
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: load_goveval_names,v 1.3 2004-12-01 17:15:10 francis Exp $';

use strict;

use DBI;
use DBD::SQLite;
use Text::CSV;
use Data::Dumper;
use Common;

my $dbh = DBI->connect('dbi:SQLite:dbname=/home/francis/toobig/geodata-mysociety/mapit.sqlite', '', '', { AutoCommit => 0, RaiseError => 1 });

my $parent_types = [qw(DIS LBO MTD UTA LGD CTY)];
my $child_types = [qw(DIW LBW MTW UTE UTW LGW CED)];

sub canonicalise_council_name {
    $_ = shift;

    if (m/^Durham /) {
        # Durham County and Durham District both have same name (Durham)
        # so we leave in the type (County/District) as a special case
        s# City Council# District#;
        s# County Council# County#;
    } else {
        s#\s*\(([A-Z]{2})\)##; # Pendle (BC) => Pendle
        s#(.+) - (.+)#$2#;     # Sir y Fflint - Flintshire => Flintshire

        s#^City and County of ##;         # City and County of the City of London => the City of London
        s#^The ##i;
        s# City Council$##;    # OS say "District", GovEval say "City Council", we drop both to match
        s# County Council$##;  # OS say "District", GovEval say "City Council", we drop both to match
        s# Borough Council$##; # Stafford Borough Council => Stafford
        s# Council$##;         # Medway Council => Medway
        s# City$##;            # Liverpool City => Liverpool
        s#^City of ##;         # City of Glasgow => Glasgow
        s#^County of ##;
        s#^Corp of ##;         # Corp of London => London
        s# District$##;
        s# County$##;
        s# City$##;
        s# London Boro$##;

        s#sh'r$#shire#;       # Renfrewsh'r => Renfrewshire
        s#W\. Isles#Na H-Eileanan an Iar#;    # Scots Gaelic(?) name for Western Isles
        s#^Blackburn$#Blackburn with Darwen#;

        s#\bN\.\s#North #g;    # N. Warwickshire => North Warwickshire
        s#\bS\.\s#South #g;    # S. Oxfordshire => South Oxfordshire
        s#\bE\.\s#East #g;     # North E. Derbyshire => North East Derbyshire
        s#\bW\.\s#West #g;     # W. Sussex => West Sussex
        s#\bGt\.\s#Great #g;   # Gt. Yarmouth => Great Yarmouth

        s#&#and#g;
        s#-# #g;
        s#'##g;                # King's Lynn => Kings Lynn
        s#,##g;                # Rhondda, Cynon, Taff => Rhondda Cynon Taff
    }
    
    return $_;
}

# Cache of name-->id map of all the parent area types (District Council,
# Unitary Authority etc....)
my $typeclause= "type = '" . join("' or type = '", @$parent_types) . "'";
my $s = $dbh->prepare('select area_id, name from area_name, area where
    area_name.area_id = area.id and (' . $typeclause . ')');
$s->execute();
my %parent_to_id;
while (my ($area_id, $name) = $s->fetchrow_array()) {
    #print "$area_id $name\n";

    # Create canonical version of name and also hash it as lookup
    $_ = canonicalise_council_name($name);
    if (exists($parent_to_id{$_})) {
        die "Already have id for canonicalised $_, being " .  $parent_to_id{$_} .  "\n";
    }
    $parent_to_id{$_} = $area_id;
}
 
# Load the GovEval data.
my $C = new Text::CSV;
<STDIN>;    # header line
my $councils;

while (my $line = <STDIN>) {
    chomp($line);
    $C->parse($line);
    my ($first, $last, $vdiv, $council, $email) = map { trim_spaces($_) } $C->fields();

    if (!defined $council) {
        print STDERR "council not defined for line $line\n";
        die;
    }
    
    $_ = canonicalise_council_name($council);

    if (!exists($parent_to_id{$_})) {
        die "not got $council, matching canonical $_\n";
    }
    my $id = $parent_to_id{$_};
    
    $councils->{$id}->{canonname} = $_;
    $councils->{$id}->{govevalname} = $council;
    if (!exists($councils->{$id}->{gotwards}->{$vdiv})) {
        push @{$councils->{$id}->{wards}}, { name => $vdiv };
        $councils->{$id}->{gotwards}->{$vdiv} = 1;
    }
}

my @ck = keys %$councils;
my @pk = keys %parent_to_id;
if ($#ck != $#pk) {
    print STDERR "Council count mismatch:\n";
    print STDERR "There are " . scalar(@ck) . " councils in GovEval data\n";
    print STDERR "There are " . scalar(@pk) . " councils in database\n";
}

# Print out councils in $parent_to_id for which nobody has been added to $councils
foreach my $parent (@pk) {
    my $id = $parent_to_id{$parent};
    if (!exists($councils->{$id})) {
        print STDERR "Missing $parent id $id from GovEval data\n"; 
    }
}

# For each "council" (or similar), get list of "wards" (or similar) and match it up
# with what is in the database already.
foreach my $id (keys %$councils) {
    my $council = $councils->{$id}->{govevalname};
    match_council_wards($council, $id);
}

sub match_council_wards {
    my ($council, $id) = @_;
    print "Council: $council Area: $id\n";

    # Set of wards GovEval have
    my $wards_goveval = $councils->{$id}->{wards};

    # Set of wards already in database (from Ordnance Survey / ONS)
    my $rows = $dbh->selectall_arrayref('select area_id, name from area_name, area where
        area_name.area_id = area.id and parent_area_id = ?', {}, $id);
    my $wards_database;
    foreach my $row (@$rows) { 
        my ($area_id, $name) = @$row;
        push @{$wards_database}, { name => $name, id => $area_id };
    }
    
    # Work out area_id for each GovEval ward
    foreach my $g (@$wards_goveval) {
        # Find the entry in database which best matches each GovEval
        # name, store multiple same-length ties.
        my $longest_len = -1;
        my $longest_matches = undef;
        foreach my $d (@$wards_database) {
            my $match1 = $g->{name};
            my $match2 = $d->{name};
            my $common_len = Common::placename_match_metric($match1, $match2);
          
            # If more common characters, store it
            if ($common_len > $longest_len) {
                $longest_len = $common_len;
                $longest_matches = undef;
                push @{$longest_matches}, $d;
            } elsif ($common_len == $longest_len) {
                push @{$longest_matches}, $d;
            }
        }

        # Longest len
        if ($longest_len < 3) {
            print STDERR "${council}: Couldn't find match in database for GovEval ward " .  $g->{name} . " (longest common substring < 3)\n";
            return;
        }

        # Record the best ones
        $g->{matches} = $longest_matches;
        #print Dumper($longest_matches);
        # If exactly one match, use it for definite
        if ($#$longest_matches == 0) {
            push @{$longest_matches->[0]->{used}}, $g;
            $g->{id} = $longest_matches->[0]->{id};
            print "Best is: " . $g->{name} . " is " .  $longest_matches->[0]->{name} . " " .  $longest_matches->[0]->{id} . "\n";
        } else {
            foreach my $longest_match (@{$longest_matches}) {
                print "Ambiguous are: " . $g->{name} . " is " .  $longest_match->{name} . " " .  $longest_match->{id} . "\n";
            }

        }
    }

    # Second pass to clear up those with two matches 
    # e.g. suppose there are both "Kilbowie West Ward", "Kilbowie Ward"
    # The match of "Kilbowie Ward" against "Kilbowie West" and "Kilbowie"
    # will find Kilbowie as shortest substring, and have two matches.
    # We want to pick "Kilbowie" not "Kilbowie West", but can only do so
    # after "Kilbowie West" has been allocated to "Kilbowie West Ward".
    # Hence this second pass.
    foreach my $g (@$wards_goveval) {
        if (!exists($g->{id})) {
            my $found = 0;
            foreach my $longest_match (@{$g->{matches}}) {
                #print Dumper($longest_match);
                if (!exists($longest_match->{used})) {
                    if ($found) {
                        print STDERR "${council}: Only ambiguous matches found for " .  $longest_match->{name} . "\n";
                        return;
                    }
                    push @{$longest_match->{used}}, $g;
                    $g->{id} = $longest_match->{id};
                    print "Resolved is: " . $g->{name} . " is " .  $longest_match->{name} . " " .  $longest_match->{id} . "\n";
                    $found = 1;
                }
            }
            if (!$found) {
                print STDERR "${council}: Couldn't find match in database for GovEval ward " . $g->{name} . " (still ambiguous)\n";
                return;
            }
        }
    }
    

    # Check we used every single ward (rather than used same twice)
    foreach my $d (@$wards_database) {
        if (!exists($d->{used})) {
            print STDERR "${council}: Ward in database, not in GovEval data: " . $d->{name} . " id " . $d->{id} . "\n";
            return;
        }
        delete $d->{used};
    }

    # Clean up looped references
    foreach my $d (@$wards_database) {
        delete $d->{used};
    }
    foreach my $g (@$wards_goveval) {
        delete $g->{matches};
    }

#    print Dumper($wards_goveval);
#    print Dumper($wards_database);
    print "--------------------------------------------------\n";
}

$dbh->disconnect();



