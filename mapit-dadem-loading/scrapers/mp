#!/usr/bin/perl -w -I../../../perllib -I../
#
# scrapers/mp
# Load in MPs from UKParse format XML file, and write out CSV file.
#
# Parameters: 
# $1 - all-member.xml file from UKParse
# $2 - people.xml file from UKParse
# $3 - output CSV file of all current members
# $4 - output CSV file of deleted members
# $5 - optional CSV file of extra fax numbers for new members
# make sure ../conf/general is configured for mapit db
#
# Example use:
#./mp ~/devel/publicwhip/members/all-members.xml ~/devel/publicwhip/members/people.xml ~/devel/repdata/mysociety/mps-post-election2005.csv ~/devel/repdata/mysociety/mps-deleted-election2005.csv ~/devel/repdata/mysociety/newmps-emails-election2005.csv
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: mp,v 1.5 2012-03-26 10:17:23 dademcron Exp $';

use strict;

use Data::Dumper;
use XML::Twig;
use Text::CSV_XS;

use Common;
use mySociety::VotingArea;

use POSIX;
my $today = strftime("%Y-%m-%d",localtime(time()));

my $all_members_xml = shift(@ARGV);
die "specify all-members.xml from parlparse" if (!defined($all_members_xml));
my $people_xml = shift(@ARGV);
die "specify people.xml from parlparse" if (!defined($people_xml));
my $file_output_all = shift(@ARGV);
die "specify output CSV" if (!defined($file_output_all));
my $file_output_deleted = shift(@ARGV);
die "specify output CSV for deleted members" if (!defined($file_output_deleted));
my $extra_emails_file = shift(@ARGV);
if (defined($extra_emails_file)) {
    open(EXTRA, "<$extra_emails_file") or die "failed to open $extra_emails_file";
}

# Load person ids in
my $membertoperson = {};
my $twig = new XML::Twig(
    output_filter => 'safe',
    twig_handlers => { person => \&person }
);
$twig->parsefile($people_xml);

sub person {
    my ($twig, $person) = @_;
    my $personid = $person->att('id');
    for (my $office = $person->first_child('office'); $office; $office = $office->next_sibling('office')) {
        $membertoperson->{$office->att('id')} = $personid;
    }
    $twig->purge;
}

# Count how many members for each person, and store current members attributes
my $nowc = 0;
my $personcount;
my $peoplenow;
my @members;
my @membersnow;
$twig = new XML::Twig(
    output_filter => 'safe',
    twig_handlers => { member => \&member }
);
$twig->parsefile($all_members_xml);

sub member {
    my ($twig, $member) = @_;
    my $member_id = $member->att('id');
    push @members, $member;
    my $person_id = $membertoperson->{$member_id};
    $personcount->{$person_id}++;
    # Current parliament after 5th May 2005
    if ($member->att('fromdate') le $today 
        && $member->att('todate') ge $today) {
        $nowc++;
        push @membersnow, $member;
        $peoplenow->{$person_id} = 1;
    }
    $twig->purge;
}

die "very few MPs!" if $nowc < 640;

# Load in extra emails / fax
my $extra;
if (defined($extra_emails_file)) {
    my $C = new Text::CSV_XS({ binary => 1 });
    <EXTRA>;    # header line
    while (my $line = <EXTRA>) {
        chomp($line);
        $C->parse($line);
        map { die "Not valid field in $line" if (!defined $_) } $C->fields();
        my ($first, $last, $cons, $email, $fax) = map { trim_spaces($_) } $C->fields();
        $extra->{"$first $last $cons"} = [$email, $fax];
    }
}

# Print out all MPs to CSV
my $csv = new Text::CSV_XS({ binary => 1 });
open(CSV, ">$file_output_all");
binmode(CSV, ":utf8");
print CSV "name, constituency, email, fax, phone, constituencyfax, party\n";
foreach my $member (@membersnow) {
    my $fullname = $member->att('firstname') . " " . $member->att('lastname');
    my $party = $member->att('party');
    my $constituency = $member->att('constituency');
    my $member_id = $member->att('id');
    my $person_id = $membertoperson->{$member_id};
    my $count = $personcount->{$person_id};
    my $email = undef;
    my $fax = undef;
    if ($extra) {
        my $extra_data = $extra->{"$fullname $constituency"}; 
        if (defined($extra_data)) {
            $email = $extra_data->[0];
            $fax = $extra_data->[1];
            delete $extra->{"$fullname $constituency"}; 
        }
    }
    $csv->print(\*CSV, [$fullname, $constituency, $email, $fax, undef, undef, $party]);
    print CSV "\n";
}
close CSV;

# Check we used all the extra data
my $failed = 0;
foreach my $broken (keys %$extra) {
    print STDERR "Failed to use extra data line '$broken' from $extra_emails_file\n";
    $failed = 1;
}
die if $failed;

# Print out deleted MPs
open(DELETED, ">$file_output_deleted");
print DELETED "name, constituency, party\n";
my $beforec = 0;
foreach my $member (@members) {
    my $member_id = $member->att('id');
    my $person_id = $membertoperson->{$member_id};

    # Parliament before dissolution before 2005 General Election
    if ($member->att('todate') eq "2005-04-11") {
        $beforec++;
        if (!defined($peoplenow->{$person_id})) {
            my $fullname = $member->att('firstname') . " " . $member->att('lastname');
            my $party = $member->att('party');
            my $constituency = $member->att('constituency');
            $csv->print(\*DELETED, [$fullname, $constituency, $party]);
            print DELETED "\n";
        }
    }
    undef $member->{att};
}
close DELETED;

