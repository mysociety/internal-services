#!/usr/bin/perl -w -I../../perllib
#
# load_friendly_names:
# From the mySociety, Ordnance Survey, Office of National Statistics or
# legislation names
# for areas in the database, construct "friendly" names suitable for display to
# users. Mainly this consists of stripping the type suffices (e.g. "Boro Const")
# from the Ordnance Survey names.
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: load_friendly_names,v 1.27 2010-04-23 17:22:08 dademcron Exp $';

use strict;

use DBI;
use DBD::Pg;
use Data::Dumper;
use mySociety::StringUtils qw(trim merge_spaces string_diff);

use Common;

my $dbh = connect_to_mapit_database();

# friendly_from_os NAME
# Convert the NAME of a constituency into a friendly version, which
# doesn't have any suffix saying what type it is.  Input should
# be the OS spelling of the name.
sub friendly_from_os ($) {
    $_ = shift;
    $_ = trim(merge_spaces($_));

    # Specific to Europe regions
    s# Euro Region$##;
    s#N\. Ireland#Northern Ireland#;

    # Specific to Westminster constituencies
    s# Burgh Const$##;
    s# Co Const$##;
    s# Boro Const$##;
    s# County Constituency$##;
    s# Burgh Constituency$##;

    # Scottish Constituency/Electoral Region
    s# Islands P Const$##;
    s# P Const$##;
    s# PER$##;

    # Welsh
    s# Assembly Const$##;
    s# Assembly ER$##;

    # London
    s# GL Assembly Const$##;

    # Specific to wards and councils
    s#\s*[A-Z]{2}$##; # Eaton Bray ED => Eaton Bray
    s# District$##;
    s# Ward$##;

    # General
    s#\bSt\.\s#St #g;       # St. Pancras => St Pancras

    return $_;
}

# friendly_from_mysoc NAME
# Convert the NAME of a council into a friendly version, including
# type of council. Input is the mySociety version of a name, from somewhere
sub friendly_from_mysoc ($) {
    $_ = shift;

    s/ \(BC\)$/ Borough Council/;
    s/ \(DC\)$/ District Council/;
    s/ \(UC\)$/ Council/;
    s/N\. /North /;
    s/S\. /South /;
    s/E\. /East /;
    s/W\. /West /;
    s/Gt\. /Great /;

    s/^City of // unless /York/; # City of Glasgow/Edinburgh => Glasgow/Edinburgh
    s/Corporation of London/City of London Corporation/;
    s/City Borough/City/; # Westminster and Liverpool

    s/sh'r/shire/; # Fix Renfrewshire
    s/West Isles Council/Comhairle nan Eilean Siar/;
    s/^Blackburn /Blackburn with Darwen /;

    s/^Preston Borough Council$/Preston City Council/; # Became a city in 2002
    s/^Wolverhampton Borough Council$/Wolverhampton City Council/;
    s/^Milton Keynes Borough /Milton Keynes /;
    s/Rhondda Cynon Taff/Rhondda Cynon Taf/;
    s/^Bracknell Forest Borough /Bracknell Forest /;
    s/^North Devon District /North Devon /;

    return $_;

}
my $s = $dbh->prepare('select id from area order by id');  # XXX generations
$s->execute();

while (my ($area_id) = $s->fetchrow_array()) {
    my $names = $dbh->selectall_hashref('select name_type, name from area_name where area_id = ?', 'name_type', {}, $area_id);
    my $friendly;
    if (exists($names->{M})) {
        # Currently EUR(NI), CTY, DIS, LBO, MTD, UTA, LGD, ward edits
        # This fixes up the (originally GovEval) names for display
        $friendly = friendly_from_mysoc($names->{M}->{name});
        warn "Brackets in name $friendly" if $friendly =~ m/\(|\)/;
    } elsif (exists($names->{L})) { # LGE, WMC(Scotland)
        $friendly = friendly_from_os($names->{L}->{name});
    } elsif (exists($names->{O})) { # Most
        $friendly = friendly_from_os($names->{O}->{name});
    } elsif (exists($names->{S})) { # COP, NIE, WMC(NI)
        $friendly = $names->{S}->{name};
    } else {
        print STDERR "No name to make friendly for $area_id\n";
    }
    if (defined($friendly)) {
        $friendly = trim(merge_spaces($friendly));
        $dbh->do(q#delete from area_name where area_id = ? and name_type = 'F'#, {}, $area_id);
        $dbh->do(q#insert into area_name (area_id, name_type, name) values (?, 'F', ?)#, {}, $area_id, $friendly);
    }
    #print $area_id, " ", $friendly, "\n";
}

$dbh->commit();
$dbh->disconnect();

