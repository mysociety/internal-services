#!/usr/bin/perl -w -I../../perllib
#
# load_friendly_names:
# From the mySociety, Ordnance Survey, or Office of National Statistics names
# for areas in the database, construct "friendly" names suitable for display to
# users. Mainly this consists of stripping the type suffices (e.g. "Boro Const")
# from the Ordnance Survey names.
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: load_friendly_names,v 1.7 2005-02-08 10:36:29 francis Exp $';

use strict;

use DBI;
use DBD::Pg;
use Data::Dumper;

use Common;

my $dbh = connect_to_mapit_database();

# Nuke any existing friendly names.
$dbh->do(q#delete from area_name where name_type = 'F'#);

# friendly_from_os NAME
# Convert the NAME of a constituency into a friendly version, which
# doesn't have any suffix saying what type it is.  Input should
# be the OS spelling of the name.
sub friendly_from_os ($) {
    $_ = shift;

    # Specific to Europe regions
    s#^Greater ##i;
    s# Euro Region$##;
    s#N\. Ireland#Northern Ireland#;

    # Specific to Westminster constituencies
    s# Burgh Const$##;
    s# Co Const$##;
    s# Boro Const$##;

    # Scottish Constituency/Electoral Region
    s# P Const$##;
    s# PER$##;

    # Welsh
    s# Assembly Const$##;
    s# Assembly ER$##;

    # London
    s# GL Assembly Const$##;

    # Specific to wards and councils
    s#\s*\(([A-Z]{2})\)$##; # Pendle (BC) => Pendle
    s#\s*([A-Z]{2})$##; # Pendle (BC) => Pendle
    s#^City and County of the#The#;         # City and County of the City of London => the City of London
    s# City Council$##;    # OS say "District", GovEval say "City Council", we drop both to match
    s# County Council$##;  # OS say "District", GovEval say "City Council", we drop both to match
    s# Borough Council$##; # Stafford Borough Council => Stafford
    s# Council$##;         # Medway Council => Medway
    s#^City of ##;         # City of Glasgow => Glasgow
    s# District$##;
    s# County$##;
    s# City$##;
    s# London Boro$##;
    s# Ward$##;

    # General
    s#\bSt\.\s#St #;       # St. Pancras => St Pancras

    return $_;
}

my $s = $dbh->prepare('select id from area');  # XXX generations
$s->execute();

while (my ($area_id) = $s->fetchrow_array()) {
    my $names = $dbh->selectall_hashref('select name_type, name from area_name where area_id = ?', 'name_type', {}, $area_id);
    my $friendly = '';
    if (exists($names->{M})) {
        $friendly = $names->{M}->{name};
        # This fixes up the (originally GovEval) names for display
        $friendly =~ s/ \(BC\)$/ Borough Council/;
        $friendly =~ s/ \(DC\)$/ District Council/;
        $friendly =~ s/ \(UC\)$/ Council/;
        warn "Brackets in name $friendly" if $friendly =~ m/\(|\)/;
    } elsif (exists($names->{O})) {
        $friendly = friendly_from_os($names->{O}->{name});
    } elsif (exists($names->{S})) {
        $friendly = $names->{S}->{name};
    } else {
        print STDERR "No name to make friendly for $area_id\n";
    }
    if ($friendly ne "") {
        $dbh->do(q#insert into area_name (area_id, name_type, name) values (?, 'F', ?)#, {}, $area_id, $friendly);
    }
#    print $area_id, " ", $friendly, "\n";
}

$dbh->commit();
$dbh->disconnect();

