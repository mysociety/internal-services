#!/usr/bin/perl -w -I../../perllib
#
# load_csv_names
# Load in CSV files match names to Ordnance Survey ones in the MaPit database,
# and add in the GovEval/FaxYourMP/PublicWhip names as alternates.
#
# Parameters: 
# $1 - kind of data, currently choose from: mep, mp
# stdin - the CSV file from GovEval or FaxYourMP
# make sure ../conf/general is configured for mapit db
#
# Example usage:
# cat ../../../repdata/goveval/mep-20041001.csv | ./load_csv_names mep
# cat  ~/devel/repdata/mysociety/mps-post-election2005.csv  | ./load_csv_names mp
# cat ../../../repdata/goveval/faxyourmp-mp-20041207-withcons.csv | ./load_csv_names mp
# cat ../../../repdata/goveval/msp-sp{c,e}-20041001.csv | ./load_csv_names msp
# cat ../../../repdata/goveval/wam-20041001.csv | ./load_csv_names wam
# cat ../../../repdata/goveval/gla-20041001.csv | ./load_csv_names lam
# cat ../../../repdata/mysociety/democratic-services-rev8.csv | ./load_csv_names ds
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: load_csv_names,v 1.6 2006-04-10 11:33:33 francis Exp $';

use strict;

use DBI;
use DBD::Pg;
use Text::CSV_XS;
use Data::Dumper;

use mySociety::VotingArea;

use Common;
use CouncilMatch;

my $kind = lc(shift(@ARGV));
die "specify what kind of CSV file" if (!defined($kind));
my $types;
my $name_type_char;
my $canon_function = \&CouncilMatch::canonicalise_constituency_name;
if ($kind eq "mep") {
    $types = [qw(EUR)];
    $name_type_char = 'G';
} elsif ($kind eq "mp") {
    $types = [qw(WMC)];
    $name_type_char = 'X';
} elsif ($kind eq "lord") {
    $types = [qw(HOL)];
    $name_type_char = 'X';
} elsif ($kind eq "msp") {
    $types = [qw(SPC SPE)];
    $name_type_char = 'G';
} elsif ($kind eq "wam") {
    $types = [qw(WAC WAE)];
    $name_type_char = 'G';
} elsif ($kind eq "lam") {
    $types = [qw(LAC LAE)];
    $name_type_char = 'G';
} elsif ($kind eq "mla") {
    $types = [qw(NIE)];
    $name_type_char = 'G';
} elsif ($kind eq "ds") {
    $types = $mySociety::VotingArea::council_parent_types;
    $name_type_char = 'M';
    $canon_function = \&CouncilMatch::canonicalise_council_name
} else {
    die "Please specify 'mep', 'mp', 'msp', 'wam', 'lam', 'ds'";
}

my $dbh = connect_to_mapit_database();
# DBI->trace(2);

# %parent_to_id
# Hash of voting area canonical name to voting area ID from existing
# MaPit data.
my %parent_to_id;

# Cache of name-->id map of all the areas
my $s = $dbh->prepare(
        q#select area_id, name from area_name, area
            where area_name.area_id = area.id
            and (# . join(' or ', map { "type = '$_'" } @$types) . q#)
            and generation_low <= (select id from current_generation) and 
                (select id from current_generation) <= generation_high
            #
    );
$s->execute();

while (my ($area_id, $name) = $s->fetchrow_array()) {
    # "Durham" without specifying "County" or "City" is no use
    next if ($kind eq "ds" and $name eq "Durham");

    # Create canonical version of name and also hash it as lookup
    $_ = &$canon_function($name);
    if (exists($parent_to_id{$_}) and $parent_to_id{$_} != $area_id) {
        die "$area_id: Already have different id for canonicalised $_, being " .  $parent_to_id{$_} .  "\n"
    }

    $parent_to_id{$_} = $area_id;
}

# Load the GovEval data.
my $C = new Text::CSV_XS({ binary => 1 });
<STDIN>;    # header line

# %newnames
# Hash of GovEval name to corresponding id.
my %newnames;

while (my $line = <STDIN>) {
    chomp($line);
    $C->parse($line);
    my $cons;

    if ($kind eq "mep" or $kind eq "msp" or $kind eq "wam" or $kind eq "lam" or $kind eq "mla") {
        # GovEval-format file.
        my ($first, $last, $constituency, @dummy) = map { trim_spaces($_) } $C->fields();
        $cons = $constituency;
        next if $kind eq "lam" and $cons eq "Proportionally Elected Member";
    } elsif ($kind eq "mp" || $kind eq 'lord') {
        # Dump from FYMP, ukparse_xml_to_csv, scrapers/mp
        my ($name, $constituency, @dummy) = map { trim_spaces($_) } $C->fields();
        $cons = $constituency;
    } elsif ($kind eq "ds") {
        # Out own mySociety data collected by Steiny with patience and pinache
        my ($council, @dummy) = map { trim_spaces($_) } $C->fields();
        $cons = $council;
    } else {
        die "Missing kind in code";
    }

    die "constituency not defined for line '$line'\n" unless (defined($cons));
    $_ = &$canon_function($cons);
    die "no constituency in database matches canonical name '$_'\n" unless (exists($parent_to_id{$_}));
    my $id = $parent_to_id{$_};

    if (exists($newnames{$cons})) {
        if ($newnames{$cons} != $id) {
            die "Already have different id for GovEval name $cons id $id, being " .  $newnames{$cons} .  "\n" 
        } else {
            # Exact duplicate, so ignore it
        }
    } else {
        $newnames{$cons} = $id;
    }
}

# Add name aliases to the database
foreach my $name (keys %newnames) {
    my $id = $newnames{$name};
    # print "$id $name\n";
    # Delete existing 'G' name data
    $dbh->do(q#delete from area_name where area_id = ? and name_type = ?#, {}, $id, $name_type_char);
    # Insert updated / new name data
    $dbh->do("insert into area_name (area_id, name_type, name) values (?, ?, ?)", {}, $id, $name_type_char, $name);
}

$dbh->commit();

$dbh->disconnect();

