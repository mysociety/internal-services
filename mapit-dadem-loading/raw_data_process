#!/usr/bin/perl -w -I../../perllib
#
# raw_data_process
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: raw_data_process,v 1.13 2005-10-03 13:42:56 francis Exp $';

use strict;
$| = 1; # flush STDOUT afer each write

use DBI;
use DBD::Pg;
use Text::CSV;
use Data::Dumper;
use Getopt::Long;

use mySociety::VotingArea;

use Common;
use CouncilMatch;

# Options
sub help {
print <<END

Usage: raw_data_process [OPTION]

Options are:
    --verbose=n   Choose 0 (no progress) to 2 (full debug), defaults to 2

END
}
our $verbose = 1;
our $help;
if (!GetOptions(
        "verbose=i" => \$verbose,
        "help" => \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}

my $param1 = shift(@ARGV);
my $param2 = shift(@ARGV);
my $m_dbh = connect_to_mapit_database();
my $d_dbh = connect_to_dadem_database();
CouncilMatch::set_db_handles($m_dbh, $d_dbh);

my $generation = $m_dbh->selectrow_array('select id from current_generation');

# Cache of area_id->type etc.
my $area_id_data = $m_dbh->selectall_hashref(
        qq#select area_name.name, area.id from area, area_name
            where area_name.area_id = area.id and
            generation_low <= $generation and $generation <= generation_high and
            area_name.name_type = 'F' and
            (# . join(' or ', map { "type = '$_'" } @$mySociety::VotingArea::council_parent_types) . q#)#,
        'id');

if (defined $param1 and ($param1 eq "london" or $param1 eq "top" or $param1 =~ m/^\d+$/)) {
    if ($param1 eq "london" or $param1 eq "top") {
        print "Processing London councils\n" if $verbose > 0;
        my $specialcouncils;
        if ($param1 eq "london") {
            $specialcouncils = [
               "City of London", "Westminster", "Kensington and Chelsea", "Hammersmith and Fulham", "Wandsworth", "Lambeth", "Southwark", "Tower Hamlets", "Hackney", "Islington", "Camden", "Brent", "Ealing", "Hounslow", "Richmond upon Thames", "Kingston upon Thames", "Merton", "Sutton", "Croydon", "Bromley", "Lewisham", "Greenwich", "Bexley", "Havering", "Barking and Dagenham", "Redbridge", "Newham", "Waltham Forest", "Haringey", "Enfield", "Barnet", "Harrow", "Hillingdon",
            ];
        } else {
            $specialcouncils = [
                "Kent", "Hampshire", "Cambridgeshire", "Surrey", "Hertfordshire", "The City of Brighton and Hove", "Camden", "Cambridge", "Birmingham", "Maidstone", "Harrow", "Lewisham", "Essex", "West Sussex", "Staffordshire", "Lambeth", "Glasgow", "Oxfordshire", "Sheffield", "Cheshire",
            ];
        }
        my $wardnames = $m_dbh->selectall_hashref(
                qq#select * from area_name, area where area_name.area_id = area.id and
                generation_low <= $generation and $generation <= generation_high and
                (# . join(' or ', map { "type = '$_'" } @$mySociety::VotingArea::council_parent_types) . q#)#, 
                'name', {});
        my $wardnamescanon;
        do { $wardnamescanon->{CouncilMatch::canonicalise_council_name($_)} = $wardnames->{$_} } for keys %$wardnames;

        for my $specialcouncil (@$specialcouncils) {
            my $canon = CouncilMatch::canonicalise_council_name($specialcouncil);
            die "none for $specialcouncil" if (!exists($wardnamescanon->{$canon}));
            my $londonid = $wardnamescanon->{$canon}->{id};
            print "\"$specialcouncil\", $londonid\n" if $verbose > 0;
            my $result = CouncilMatch::process_ge_data($londonid, $verbose);
        }
    } else {
        # Process just one council
        print "Processing one council " . $area_id_data->{$param1}->{name} . " $param1\n" if $verbose > 0;
        my $result = CouncilMatch::process_ge_data($param1, $verbose);
        if ($result->{error}) {
            print "Failed\n" if $verbose > 0;
            print $result->{details} if $verbose > 0;
            print $result->{error} if $verbose > 0;
        } else {
            print "Success\n" if $verbose > 0;
        }
    }
} else {
    # For each "council" (or similar), get list of "wards" (or similar) and match it up
    # with what is in the database already.
    my $success = 0;
    my $count = 0;
    foreach my $id (keys %$area_id_data) {
        my $current_status =  CouncilMatch::get_process_status($id);
        next if ((defined $param1) and ($param1 eq "status") and ($current_status ne $param2));

        printf "%38s %5d: ", $area_id_data->{$id}->{name}, $id if $verbose > 0;

        my $result = CouncilMatch::process_ge_data($id, $verbose);
        if ($result->{error}) {
            print " FAIL\n" if $verbose > 0;
        } else {
            $success++;
            print " ok\n" if $verbose > 0;
        }

        $count++;
    }
    print "\n" if $verbose > 0;
    print "Success for $success/$count councils\n" if $verbose > 0;
    print "Failed for " . ($count-$success) . " councils\n" if $verbose > 0;
}

$m_dbh->disconnect();
$d_dbh->disconnect();



