#!/usr/bin/perl -w -I../../perllib
#
# raw_data_process
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: raw_data_process,v 1.4 2005-02-02 11:04:42 francis Exp $';

use strict;
$| = 1; # flush STDOUT afer each write

use DBI;
use DBD::Pg;
use Text::CSV;
use Data::Dumper;
use mySociety::CouncilMatch;

#my @foo = ("hello goodbye - foo (bar");
#mySociety::CouncilMatch::split_lumps_further(\@foo);
#exit;

#print mySociety::CouncilMatch::canonicalise_person_name('Angel Hope CBE DL');
#print "\n";
#exit;

use Common;

my $runoneid = shift(@ARGV);
my $m_dbh = connect_to_mapit_database();
my $d_dbh = connect_to_dadem_database();
mySociety::CouncilMatch::set_db_handles($m_dbh, $d_dbh);

my $verbosity = 0;

# Cache of area_id->type etc.
my $area_id_data = $m_dbh->selectall_hashref(
        q#select area_name.name, area.id from area, area_name
            where area_name.area_id = area.id and
            area_name.name_type = 'F' and
            (# . join(' or ', map { "type = '$_'" } @$mySociety::CouncilMatch::parent_types) . q#)#,
        'id');

if (defined $runoneid) {
    if ($runoneid eq "london" or $runoneid eq "top") {
        print "Processing London councils\n";
        my $specialcouncils;
        if ($runoneid eq "london") {
            $specialcouncils = [
               "City of London", "Westminster", "Kensington and Chelsea", "Hammersmith and Fulham", "Wandsworth", "Lambeth", "Southwark", "Tower Hamlets", "Hackney", "Islington", "Camden", "Brent", "Ealing", "Hounslow", "Richmond upon Thames", "Kingston upon Thames", "Merton", "Sutton", "Croydon", "Bromley", "Lewisham", "Greenwich", "Bexley", "Havering", "Barking and Dagenham", "Redbridge", "Newham", "Waltham Forest", "Haringey", "Enfield", "Barnet", "Harrow", "Hillingdon",
            ];
        } else {
            $specialcouncils = [
                "Kent", "Hampshire", "Cambridgeshire", "Surrey", "Hertfordshire", "The City of Brighton and Hove", "Camden", "Cambridge", "Birmingham", "Maidstone", "Harrow", "Lewisham", "Essex", "West Sussex", "Staffordshire", "Lambeth", "Glasgow", "Oxfordshire", "Sheffield", "Cheshire",
            ];
        }
        my $wardnames = $m_dbh->selectall_hashref(
                q#select * from area_name, area where area_name.area_id = area.id  
                and (# . join(' or ', map { "type = '$_'" } @$mySociety::CouncilMatch::parent_types) . q#)#, 
                'name', {});
        my $wardnamescanon;
        do { $wardnamescanon->{mySociety::CouncilMatch::canonicalise_council_name($_)} = $wardnames->{$_} } for keys %$wardnames;

        for my $specialcouncil (@$specialcouncils) {
            my $canon = mySociety::CouncilMatch::canonicalise_council_name($specialcouncil);
            die "none for $specialcouncil" if (!exists($wardnamescanon->{$canon}));
            my $londonid = $wardnamescanon->{$canon}->{id};
            print "\"$specialcouncil\", $londonid\n";
            my $result = mySociety::CouncilMatch::process_ge_data($londonid, $verbosity);
        }
    } else {
        # Process just one council
        print "Processing one council " . $area_id_data->{$runoneid}->{name} . " $runoneid\n";
        my $result = mySociety::CouncilMatch::process_ge_data($runoneid, $verbosity);
        if ($result->{error}) {
            print "Failed\n";
            print $result->{details};
            print $result->{error};
        } else {
            print "Success\n";
        }
    }
} else {
    # For each "council" (or similar), get list of "wards" (or similar) and match it up
    # with what is in the database already.
    my $success = 0;
    my $count = 0;
    foreach my $id (keys %$area_id_data) {
        printf "%38s %5d: ", $area_id_data->{$id}->{name}, $id;
        my $result = mySociety::CouncilMatch::process_ge_data($id, $verbosity);
        if ($result->{error}) {
            print " FAIL\n";
        } else {
            $success++;
            print " ok\n";
        }

        $count++;
    }
    print "\n";
    print "Success for $success/$count councils\n";
    print "Failed for " . ($count-$success) . " councils\n";
}

$m_dbh->disconnect();
$d_dbh->disconnect();



