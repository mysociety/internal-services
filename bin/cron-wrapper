#!/usr/bin/perl -w

use strict;

use Getopt::Long;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../../perllib";

use mySociety::Config;
use mySociety::Util;
use mySociety::EmailUtil qw(is_valid_email send_email); 

my $debug = 0;

sub debug {
    my ($line) = @_;
    if ($debug) {
	print "DEBUG: $line\n";
    }
}

mySociety::Config::set_file("$FindBin::Bin/../conf/general");

my $script_name = undef;
my $send_to_email = mySociety::Config::get('ERRORS_TO_EMAIL');
my $send_from_email = mySociety::Config::get('ERRORS_FROM_EMAIL');
my $script_output = undef;

debug("Config says: from = $send_from_email, to = $send_to_email");

GetOptions ('target=s' => \$script_name);

if ($script_name) {

    # remove all slashes, directory name, etc - the target script
    # simply has to be in the same directory as this wrapper script

    $script_name =~ s!^.*/(.*)!$1!;
    $script_name = "$FindBin::Bin/$script_name";
    if (-e $script_name) {
	my $script_command = "perl $script_name 2>&1";
	$script_output = `$script_command`;	
    } else {
	$script_output = "ERROR: non-existent file $script_name";
    }
} else {
    $script_output = "ERROR: No target script specified to this wrapper script";
    $script_name = 'no target script specified to cron-wrapper';
}

if ($script_output) {

    my $output_label = 'output';

    if ($script_output =~ /error/i) {
	$output_label = 'error';
    }

    #unless (is_valid_email($send_to_email)) {
#	warn "ERROR: invalid send_to_email address $send_to_email";
#	warn "ERROR: $script_name had errors:\n$script_output";
#	die;
    #}
    unless (is_valid_email($send_from_email)) {
	warn "ERROR: invalid send_from_email address $send_from_email";
	warn "ERROR: $script_name had errors:\n$script_output";
	die;
    }
    my $email = "To: $send_to_email\nFrom: $send_from_email\nSubject: [bbcparlvid] $output_label: $script_name\n\n$script_output";
    my @send_to_email = split /,/, $send_to_email;
    my $send_email_return = send_email($email, $send_from_email, @send_to_email);
    if ($send_email_return) {
	warn "ERROR: could not send email using mySociety::EmailUtil::send_email (error code: $send_email_return)";
	warn "ERROR: $script_name had output:\n$script_output";
	die;
    }

}

exit;
