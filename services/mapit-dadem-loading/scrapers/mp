#!/usr/bin/perl -w -I../../perllib -I../../../perllib -I../
#
# scrapers/mp
# Load in MPs from JSON and write out CSV.
#
# Parameters: 
# $1 - people.json file
# $2 - output CSV file of all current members
# $3 - output CSV file of deleted members
# $4 - optional CSV file of extra details for new members
#
# Example use:
# ./mp ~/parlparse/members/people.json ~/repdata/mysociety/mps.csv ~/repdata/mysociety/mps-deleted.csv ~/repdata/mysociety/newmps-emails.csv

use strict;

use File::Slurp;
use JSON;
use POSIX;
use Text::CSV_XS;

use Common;

my $last_dissolution_date = "2015-03-30";

my $today = strftime("%Y-%m-%d",localtime(time()));

my $people_json = shift(@ARGV);
die "specify people.json file" unless defined($people_json);
my $file_output_all = shift(@ARGV);
die "specify output CSV" if (!defined($file_output_all));
my $file_output_deleted = shift(@ARGV);
die "specify output CSV for deleted members" if (!defined($file_output_deleted));
my $extra_emails_file = shift(@ARGV);
if (defined($extra_emails_file)) {
    open(EXTRA, "<$extra_emails_file") or die "failed to open $extra_emails_file";
}

my $j = decode_json(read_file($people_json));
my (%orgs, %posts, %persons);
$orgs{$_->{id}} = $_ for @{$j->{organizations}};
$posts{$_->{id}} = $_ for @{$j->{posts}};
$persons{$_->{id}} = $_->{other_names} for @{$j->{persons}};

# Count how many members for each person, and store current members attributes
my $nowc = 0;
my $peoplenow;
my @members;
my @membersnow;

foreach my $member (@{$j->{memberships}}) {
    next unless $member->{post_id} && $posts{$member->{post_id}}{organization_id} eq 'house-of-commons';
    next unless end_date($member) ge $today || end_date($member) eq $last_dissolution_date;

    push @members, $member;
    $member->{constituency} = $posts{$member->{post_id}}{area}{name};
    $member->{party} = $member->{on_behalf_of_id} ? $orgs{$member->{on_behalf_of_id}}{name} : '';

    if (start_date($member) le $today && end_date($member) ge $today) {
        $nowc++;
        push @membersnow, $member;
        $peoplenow->{$member->{person_id}} = 1;
    }
}

die "very few MPs!" if $nowc < 640;

# Load in extra emails / fax
my $extra;
if (defined($extra_emails_file)) {
    my $C = new Text::CSV_XS({ binary => 1 });
    <EXTRA>;    # header line
    while (my $line = <EXTRA>) {
        chomp($line);
        $C->parse($line);
        map { die "Not valid field in $line" if (!defined $_) } $C->fields();
        my ($first, $last, $cons, $email, $fax) = map { trim_spaces($_) } $C->fields();
        $extra->{"$first $last $cons"} = [$email, $fax];
    }
}

# Attach names to memberships
foreach my $member (@members) {
    my @names = @{$persons{$member->{person_id}}};
    @names = grep { $_->{note} eq 'Main' } @names;
    if (end_date($member) eq $last_dissolution_date) {
        @names = grep { start_date($_) le $last_dissolution_date && $last_dissolution_date le end_date($_) } @names;
    } else {
        @names = reverse sort { end_date($a) cmp end_date($b) } @names;
    }
    my $name = $names[0];
    $member->{fullname} = $name->{given_name} . " " . $name->{family_name};
    $member->{fullname} = $name->{honorific_prefix} . " $member->{fullname}"
        if $name->{honorific_prefix};
    die unless $member->{fullname} && $member->{constituency} && $member->{party};
}

# Print out all MPs to CSV
my $csv = new Text::CSV_XS({ binary => 1 });
open(CSV, ">$file_output_all");
binmode(CSV, ":utf8");
print CSV "name, constituency, email, fax, phone, constituencyfax, party\n";
foreach my $member (sort { $a->{constituency} cmp $b->{constituency} } @membersnow) {
    my $email = undef;
    my $fax = undef;
    if ($extra) {
        my $extra_data = $extra->{"$member->{fullname} $member->{constituency}"}; 
        if (defined($extra_data)) {
            $email = $extra_data->[0];
            $fax = $extra_data->[1];
            delete $extra->{"$member->{fullname} $member->{constituency}"}; 
        }
    }
    $csv->print(\*CSV, [$member->{fullname}, $member->{constituency}, $email, $fax, undef, undef, $member->{party}]);
    print CSV "\n";
}
close CSV;

# Check we used all the extra data
my $failed = 0;
foreach my $broken (keys %$extra) {
    print STDERR "Failed to use extra data line '$broken' from $extra_emails_file\n";
    $failed = 1;
}
die if $failed;

# Print out deleted MPs
open(DELETED, ">$file_output_deleted");
print DELETED "name, constituency, party\n";
foreach my $member (@members) {
    my $person_id = $member->{person_id};

    # Parliament before dissolution before 2015 General Election
    if (end_date($member) eq $last_dissolution_date) {
        if (!defined($peoplenow->{$person_id})) {
            $csv->print(\*DELETED, [$member->{fullname}, $member->{constituency}, $member->{party}]);
            print DELETED "\n";
        }
    }
}
close DELETED;

sub start_date {
    $_[0]->{start_date} // '0000-00-00';
}

sub end_date {
    $_[0]->{end_date} // '9999-12-31';
}
