#!/usr/bin/perl -w -I../perllib -I../../../perllib
#
# search:
# Test search script.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: search,v 1.3 2005-07-27 10:01:20 chris Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";
use lib "$FindBin::Bin/../../../perllib";

use Search::Xapian qw(:ops);

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../../conf/general");
}
use mySociety::DBHandle qw(dbh);

use Gaze;

my $country = uc(shift(@ARGV));

my $query = join(' ', @ARGV);
print "query = [$query]\n";

my $terms = Gaze::split_name_parts($query);
print "terms: ", join(", ", map { "$terms->{$_} '$_'" } sort keys %$terms), "\n";

my $index = mySociety::Config::get('GAZE_XAPIAN_INDEX_DIR') . "/$country";
print "xapian index dir: $index\n";

my $X = new Search::Xapian::Database(mySociety::Config::get('GAZE_XAPIAN_INDEX_DIR') . "/$country");
my $enq = $X->enquire(OP_OR, keys(%$terms));
my @matches = $enq->matches(0, 20);

print "got ", scalar(@matches), " matches\n";

# Coalesce matches by UFI (for the case where there are several names per
# feature, outside the US).
my %possible;

foreach my $match (@matches) {
    my $score = $match->get_percent();
    my $uni = $match->get_document()->get_data();
    my $ufi = dbh()->selectrow_array('select ufi from name where uni = ?', {}, $uni);
    $possible{$ufi} = $score if (!exists($possible{$ufi}) || $possible{$ufi} < $score);
}

foreach my $ufi (sort { $possible{$b} <=> $possible{$a} } keys(%possible)) {
    my ($lat, $lon, $inq, $nearq) = dbh()->selectrow_array('select lat, lon, in_qualifier, near_qualifier from feature where ufi = ?', {}, $ufi);
    my $name = dbh()->selectrow_array('select full_name from name where ufi = ? and is_primary', {}, $ufi);
    print "$name";
    print ", $inq" if ($inq);
    print " (near $nearq)" if ($nearq);
    printf " %.4f %.4f\n", $lat, $lon;
}
